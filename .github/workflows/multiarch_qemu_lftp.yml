name: lftp qemu multiarch
on:
  - workflow_dispatch
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        name: [lftp]
        os_id: [alpine]
        os_version_id: [edge]
        arch: [i386, amd64, arm32v6, arm32v7, arm64v8, ppc64le, s390x]
        include:
          - arch: i386
            docker_arch: linux/i386
          - arch: amd64
            docker_arch: linux/amd64
          - arch: arm32v6
            docker_arch: linux/arm/v6
          - arch: arm32v7
            docker_arch: linux/arm/v7
          - arch: arm64v8
            docker_arch: linux/arm64
          - arch: ppc64le
            docker_arch: linux/ppc64le
          - arch: s390x
            docker_arch: linux/s390x
    name: ${{ matrix.name }} ${{ matrix.os_id }}:${{ matrix.os_version_id }} ${{ matrix.arch }}
    env:
      CDN: http://dl-cdn.alpinelinux.org/alpine/edge/main/
      CXXFLAGS: "--static -static -std=c++17"
      CPPFLAGS: "--static -static"
      LDFLAGS: "--static -static"
    steps:
      - uses: actions/checkout@v2.3.4

      - name: Docker multiarch bootstrap
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - name: Create docker multiarch ${{ matrix.docker_arch }} container
        run: docker run --name multiarch -it -d -w /root -e CXXFLAGS="${{ env.CXXFLAGS }}" -e CPPFLAGS="${{ env.CPPFLAGS }}" -e LDFLAGS="${{ env.LDFLAGS }}" --platform ${{ matrix.docker_arch }} -v ${{ github.workspace }}:/root ${{ matrix.arch }}/${{ matrix.os_id }}:${{ matrix.os_version_id }}

      - name: Run apk update
        run: docker exec multiarch apk update --repository=${{ env.CDN }}

      - name: Run apk upgrade
        run: docker exec multiarch apk upgrade --repository=${{ env.CDN }}

      - name: Run apk to install the core build dependencies
        run: docker exec multiarch apk add autoconf automake build-base curl git libtool linux-headers perl pkgconf python3 python3-dev tar

      - name: Run apk to install the core ${{ matrix.name }} dependencies
        run: docker exec multiarch apk add expat-dev expat-static gettext-dev gettext-static libidn-dev libunistring-dev libunistring-static ncurses-dev ncurses-static openssl-dev openssl-libs-static readline-dev readline-static zlib-dev zlib-static

      - name: Download hosted ${{ matrix.name }} source
        run: docker exec multiarch curl -sL https://github.com/userdocs/lftp-static/raw/master/src/lftp-4.9.2.tar.gz -o lftp-4.9.2.tar.gz

      - name: Extract ${{ matrix.name }} source
        run: tar xf lftp-4.9.2.tar.gz

      - name: Configure
        run: docker exec multiarch bash -c 'cd /root/lftp-4.9.2 && ./configure LIBS="-l:libreadline.a -l:libncursesw.a" --prefix="/root" --with-openssl --without-gnutls --enable-static --enable-threads=posix'

      - name: Build ${{ matrix.name }}
        run: docker exec multiarch bash -c 'cd /root/lftp-4.9.2 && make -j"$(nproc)" && make install'

      - name: Rename ${{ matrix.name }} to ${{ matrix.name }}-${{ matrix.arch }}
        run: docker exec multiarch mv -f /root/bin/${{ matrix.name }} /root/bin/${{ matrix.name }}-${{ matrix.arch }}

      - name: Create path to binary env
        run: echo "binary_path=$(echo ${{ github.workspace }}/bin/${{ matrix.name }}-${{ matrix.arch }})" >> $GITHUB_ENV

      - name: Create release name env
        run: echo "binary_release_name=$(strings -d ${{ env.binary_path }} | sed -rn 's|^(lftp)/(.*)|\1 \2|p' | head -n 1)" >> $GITHUB_ENV

      - name: Create tag env
        run: echo 'binary_tag='$(strings -d ${{ env.binary_path }} | sed -rn 's|^(lftp)/(.*)|\2|p' | head -n 1) >> $GITHUB_ENV

      - name: "Create release"
        uses: ncipollo/release-action@v1
        with:
          prerelease: false
          artifacts: "${{ env.binary_path }}"
          replacesArtifacts: true
          tag: "${{ env.binary_tag }}"
          name: "${{ env.binary_release_name }}"
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}
